dat <- readRDS("C:/Users/ri87nix/LRZ Sync+Share/TourIST/Daten/Daten_aufbereitet/201216_dat_ftf.rds")
dat <- readRDS("C:/Users/ri87nix/LRZ Sync+Share/TourIST/Daten/Daten_aufbereitet/201216_dat_ftf.rds")
library(devtools)
use_vignette("functionality", title = "Functionality of TouristClust package")
library(devtools)
use_testthat()
use_rcpp()
document("TouristClust")
document()
library(testthat)
library(TouristClust)
test_check("TouristClust")
use_mit_license()
check()
check()
check()
check()
check()
check()
library(devtools)
check()
install("TouristClust", build_vignettes = TRUE)
getwd()
install(build_vignettes = TRUE)
check()
install(build_vignettes = TRUE)
document("TouristClust")
document()
check()
check()
check()
document()
check()
test()
test()
test()
check()
library(devtools)
install("TouristClust")
getwd()
install()
build_vignettes()
document("TouristClust")
document()
install()
library(TouristClust)
vignette("TouristClust")
vignette(package = "TouristClust")
install(build_vignettes = TRUE)
library(TouristClust)
vignette(package = "TouristClust")
??TouristClust
library(TouristClust)
library(tidyverse)
library(cluster)
library(microbenchmark)
library(readxl)
library(fclust)
library(vegclust)
# Application to example data:
# Load the data
data("USArrests")
USArrests
USArrests
USArrests
use_data(USArrests)
install()
document("TouristClust")
document()
install()
library(TouristClust)
USArrests
install(build_vignettes = TRUE)
document()
install(build_vignettes = TRUE)
library(TouristClust)
??TouristClust
# Loading of TouristClust and further underlying packages:
setwd("2_paper/Clustering_Tourist_Types")
data("USArrests")
# Subset of USArrests
ss <- sample(1:50, 20)
df <- scale(USArrests[ss,])
vegclust(x = df, mobileCenters = 3, m = 1,
method = "FCMdd")
set.seed(3526)
x <- claraclust(df, clusters = 3, metric = "euclidean", samples = 1,
sample_size = NULL, type = "fixed", seed = 3526)
x
print.claraclust <- function(object) {
cat("Clustering results\n\n")
cat("Medoids\n")
print(object$Medoids)
cat("/n")
cat("Clustering")
print(object$clustering)
cat("/n")
cat("Minimum distance")
print(object$avg_min_dist)
}
x
print.claraclust <- function(object) {
cat("Clustering results\n\n")
cat("Medoids\n")
print(object$medoids)
cat("\n")
cat("Clustering\n")
print(object$clustering)
cat("\n")
cat("Minimum distance\n")
print(object$avg_min_dist)
}
x
rm(print$claraclust)
rm(print.claraclust)
document()
install()
library(TouristClust)
data("USArrests")
# Subset of USArrests
ss <- sample(1:50, 20)
df <- scale(USArrests[ss,])
vegclust(x = df, mobileCenters = 3, m = 1,
method = "FCMdd")
set.seed(3526)
x <- claraclust(df, clusters = 3, metric = "euclidean", samples = 1,
sample_size = NULL, type = "fixed", seed = 3526)
x
document()
install()
library(TouristClust)
rm(USArrests)
ss <- sample(1:50, 20)
df <- scale(USArrests[ss,])
vegclust(x = df, mobileCenters = 3, m = 1,
method = "FCMdd")
set.seed(3526)
x <- claraclust(df, clusters = 3, metric = "euclidean", samples = 1,
sample_size = NULL, type = "fixed", seed = 3526)
x
build()
check()
document()
install()
library(TouristClust)
check()
install()
check()
document()
install()
check()
document()
check()
library(tibble)
document()
check()
library(devtools)
document()
install()
library(TouristClust)
library(devtools)
install()
library(devtools)
document()
install(build_vignettes = TRUE)
library(TouristClust)
find_rtols()
find_rtools()
library(covr)
install.packages("covr")
library(covr)
find_rtools()
rtools_path()
library(pkgbuild)
library(devtools)
install("TouristClust")
install()
library(TouristClust)
library(shiny)
shinyApp(
ui = fluidPage(
sliderInput("threshold",
label = "Confidence threshold",min = 0, max = 1, value = 1, step = 0.05),
plotOutput("cityplt")
),
server = function(input, output) {
output$cityplt <- renderPlot({
plot.claraclust(
x = cc_fuzzy,
data = USArrests_enriched,
type = "pca",
group_by = "Area",
confidence_threshold = input$threshold
)
})
},
options = list(height = 800)
)
install(build_vignette = TRUE)
install.packages("testthat")
install.packages(c("coalitions", "exactci", "furrr", "gert", "glmnet", "insight", "mlr3misc", "parallelMap", "sf", "slider"))
library(devtools)
install(build_vignettes = TRUE)
install(build_vignettes = TRUE)
install(build_vignettes = TRUE)
check("TouristClust")
check()
document()
install(build_vignettes = TRUE)
check()
install(build_vignettes = TRUE)
check()
document()
library(shiny)
check()
document()
library(tidyverse)
document()
install(build_vignettes = TRUE)
document()
install(build_vignettes = TRUE)
check()
install()
document()
install()
check()
document()
install()
check()
document()
install()
check()
document()
install()
check()
document()
install()
check()
document()
install()
check()
document()
install()
check()
library(factoextra)
library(ggpubr)
library(ggsci)
library(gwordcloud)
library(ggwordcloud)
library(cluster)
document()
install()
check()
use_build_ignore("paper")
document()
install()
check()
library(devtools)
test_coverage()
library(dist)
library(proxy)
library(TouristClust)
